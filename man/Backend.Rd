% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Backend-class.R, R/BackendMemory-class.R,
%   R/BackendMzR-class.R
\name{Backend}
\alias{Backend}
\alias{Backend-class}
\alias{BackendMzR-class}
\alias{backendInitialize}
\alias{backendImportData}
\alias{backendReadSpectra}
\alias{backendWriteSpectra}
\alias{BackendMemory-class}
\alias{BackendMemory}
\alias{BackendMzR}
\title{Mass spectrometry data managing backends}
\usage{
BackendMemory()

BackendMzR()
}
\value{
A [BackendMemory-class].
}
\description{
\linkS4class{MSnExperiment} objects support the use of different backends to
manage and access mass spectrometry data. Backends can be generally
classified into \emph{in-memory} and \emph{on-disk} backends. In-memory backends keep
all the (spectra) data in memory ensuring fast data access. On-disk backends
do not keep any data in memory but fetch the requested spectrum data only on
demand, applying eventual data manipulations on-the-fly. Due to their minimal
memory demand, on-disk backends support also loading and analyzing very large
MS experiments.

Available backends in \code{MSnbase} are listed in the sections following the
backend method description.
}
\section{Backend method descriptions}{

\itemize{
\item \code{backendInitialize}: initialize the backend.
\item \code{backendImportData}: performs an initial data import if the data is kept
in memory or if another intermediate data container (such as HDF5 files)
are used.
\item \code{backendReadSpectra}: reads spectrum data from the backend for the
specified file and given the spectrum metadata provided with argument
\code{spectraData}. A subset of spectra from a MS file can be retrieved by
passing only the spectra metadata for the requested spectra with the
\code{spectraData} argument. Column \code{"spIdx"} in \code{spectraData} identifies the
spectra to return.
\item \code{backendWriteSpectra}: writes spectrum to the backend, e.g. after data
manipulations are performed.
\item \code{fileNames}: access the file path to the original source files, e.g. mzML.
}
}

\section{BackendMemory}{


The \code{BackendMemory} uses a \code{list} as backend and stores all MS data in the
memory. This ensures a high performance but needs a lot of memory for larger
experiments.
It mimics the classical \linkS4class{MSnExp} behaviour.
New backends can be created with the \code{BackendMemory()} function.
}

\section{BackendMzR}{


The \code{BackendMzR} uses the original MS data files (such as \emph{mzML}, \emph{mzXML} or
\emph{CDF} files) as backend and reads the data on demand from these files. This
ensures a low memory footprint and enables thus the analysis also of very
large experiments - at the cost of a slightly lower performance. New
backends can be created with the \code{BackendMzR} function.

The \code{BackendMzR} does not support/implement the \code{backendInitialize},
\code{backendImportData} and \code{backendWriteSpectra} functions.
}

\section{Backend creation and initiation}{

}

\author{
Sebastian Gibb, Johannes Rainer
}
