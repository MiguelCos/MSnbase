% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MSnExperiment-class.R
\docType{methods}
\name{MSnExperiment}
\alias{MSnExperiment}
\alias{MSnExperiment-class}
\alias{readMSnExperiment}
\alias{spectrapply,MSnExperiment-method}
\alias{spectra,MSnExperiment-method}
\alias{spectraData}
\alias{fileNames,MSnExperiment-method}
\alias{[,MSnExperiment,ANY,ANY,ANY-method}
\alias{[[,MSnExperiment,ANY,ANY-method}
\alias{filterFile,MSnExperiment-method}
\alias{removePeaks,MSnExperiment-method}
\alias{clean,MSnExperiment-method}
\title{The MSnExperiment class to manage and access MS data}
\usage{
readMSnExperiment(file, sampleData, backend = BackendMzR(),
  smoothed = NA, BPPARAM = bpparam())

\S4method{spectrapply}{MSnExperiment}(object,
  f = spectraData(object)$fileIdx, FUN = NULL, BPPARAM = bpparam(),
  ...)

\S4method{spectra}{MSnExperiment}(object, return.type = c("Spectra",
  "list"), BPPARAM = bpparam())

spectraData(object)

\S4method{fileNames}{MSnExperiment}(object, ...)

\S4method{[}{MSnExperiment,ANY,ANY,ANY}(x, i, j, ..., drop = TRUE)

\S4method{[[}{MSnExperiment,ANY,ANY}(x, i, j = "missing",
  drop = "missing")

\S4method{filterFile}{MSnExperiment}(object, file)

\S4method{removePeaks}{MSnExperiment}(object, t = "min",
  verbose = isMSnbaseVerbose(), msLevel.)

\S4method{clean}{MSnExperiment}(object, all = FALSE,
  verbose = isMSnbaseVerbose(), msLevel.)
}
\arguments{
\item{file}{for \code{readMSnExperiment: }character\code{with the file names of the experiment. For}filterFile`: index or name of the file to which the
data should be subsetted.}

\item{sampleData}{A \link[S4Vectors:DataFrame-class]{S4Vectors::DataFrame} object with additional
information on each sample (samples as rows, information as columns).}

\item{backend}{A \linkS4class{Backend} derivate used for internal data storage.}

\item{smoothed}{\code{logical}, are the spectra smoothed?}

\item{BPPARAM}{Should parallel processing be used? See
\code{\link[BiocParallel:bpparam]{BiocParallel::bpparam()}}.}

\item{object}{A \code{MSnExperiment} object.}

\item{f}{for \code{spectrapply}: \code{factor}, \code{character}, \code{numeric} or \code{logical}
(same length than there are spectra in \code{object}, i.e. with length
equal to \code{nrow(spectraData(object))} to define how the data should be
split into chunks for parallelization.}

\item{FUN}{for \code{spectrapply}: a function or the name of a function to apply
to each \linkS4class{Spectrum} of the experiment.}

\item{...}{for \code{spectrapply}: additional arguments to be passed to \code{FUN}.}

\item{return.type}{for \code{spectra}: a \code{character(1)} specifying whether the
result should be returned as a \code{\link[=Spectra]{Spectra()}}
(\code{return.type = "Spectra"}) or a simple \code{list} of \code{Spectrum}
objects (\code{return.type = "list"}).}

\item{x}{A \code{MSnExperiment} object.}

\item{i}{for \code{[}: \code{integer}, \code{logical} or \code{character} specifying the
\strong{spectra} to which \code{object} should be subsetted.}

\item{j}{for \code{[}: \code{integer}, \code{logical} or \code{character} specifying the
\strong{samples} (files) to which \code{object} should be subsetted.}

\item{drop}{for \code{[}: if \code{drop = TRUE} and the object is subsetted to a single
element, a \code{Spectrum} class is returned; \code{drop = FALSE} returns always
a \code{MSnExperiment} object.}

\item{t}{for \code{removePeaks}: a \code{numeric(1)} defining the threshold or \code{"min"}.}

\item{verbose}{\code{logical(1)} defining the verbosity.}

\item{msLevel.}{\code{integer} defining the MS level of the spectra to which the
function should be applied.}

\item{all}{for \code{clean}: \code{logical(1)} whether all 0 intensity peaks should be
removed (\code{TRUE}) or whether 0-intensity peaks directly adjacent to a
non-zero intensity peak should be kept (\code{FALSE}).}
}
\value{
See individual method description for the return value.
}
\description{
The \code{MSnExperiment} class encapsules data and meta-data for mass
spectrometry experiments.

In contrast to the old \linkS4class{MSnExp} this class supports multiple data
backends, e.g. in-memory (\linkS4class{BackendMemory}), on-disk as
mzML (\linkS4class{BackendMzR}) or HDF5 (\linkS4class{BackendHdf5}). It supersedes
\linkS4class{MSnExp} and \linkS4class{OnDiskMSnExp} objects.
}
\details{
The \code{MSnExperiment} class uses by default a lazy data manipulation strategy,
i.e. data manipulations such as with methods \code{removePeaks} are not applied
immediately to the data, but applied on-the-fly to the spectrum data once it
is retrieved.
}
\section{Creation of objects}{


\code{MSnExperiment} classes are usually created with the \code{readMSnExperiment}
function that reads general spectrum metadata information from the  mass
spectrometry data files.
}

\section{Accessing data}{

\itemize{
\item \code{fileNames}: get the original file names from which the data was imported.
\item \code{spectra}: get the \code{list} of \linkS4class{Spectrum} objects from the experiment.
Note that the spectra in the \code{list} are not grouped by sample/file. Use
the \code{fromFile} method to split/group the \code{list} by file.
\item \code{spectraData}: get general spectrum metadata. Returns a \code{DataFrame}, each
row containing information for one spectrum. This function is equivalent
to \code{\link[=featureData]{featureData()}} of \code{MSnExp}/\code{OnDiskMSnExp} objects.
\item \code{spectrapply}: apply an arbitrary function to each spectrum in the dataset
and return its result. The function returns a \code{list} with the same length
than there are spectra. Argument \code{f} allows to define how to split the
data/spectra into chunks for paralellization. By default data access and
application of the provided function are parallelized by file.
}
}

\section{Subsetting and filtering}{

\itemize{
\item \code{[i, j]}: subset the object by spectra (\code{i}) and/or samples (files, \code{j}).
Returns an \code{MSnExperiment}, unless \code{drop = TRUE} and the object is
subsetted to a single spectrum, in which case a \code{Spectrum} is returned.
\item \code{[[i]]}: extract the \linkS4class{Spectrum} with index \code{i} from the data.
\item \code{filterFile}: subset the object by file. Returns an \code{MSnExperiment}.
}
}

\section{Data manipulation methods}{

\itemize{
\item \code{clean}: remove 0-intensity data points. See \code{\link[=clean]{clean()}} for
\linkS4class{Spectrum} objects for more details.
\item \code{removePeaks}: remove peaks lower than a threshold \code{t}. See
\code{\link[=removePeaks]{removePeaks()}} for \linkS4class{Spectrum} objects for more details.
}
}

\examples{

## Create an MSnExperiment from two input files using the on-disk
## BackendMzR backend
sf <- dir(system.file("sciex", package = "msdata"), full.names = TRUE)
dta <- readMSnExperiment(sf, backend = BackendMzR())
dta

## Get associated file names
fileNames(dta)

## Get spectra metadata
spectraData(dta)

## Extract all spectra; by default a `Spectra` is returned. We could also
## get a simple `list` of `Spectrum` objects by specifying
## `return.type = "list"`.
spctra <- spectra(dta)
head(spctra)

## Subset the object to contain only spectra 3, 12, 45
dta_sub <- dta[c(3, 12, 45), ]
spectra(dta_sub)

## Subset the object to contain only spectra from the second file
dta_sub <- dta[, 2]
fileNames(dta_sub)

## Apply an arbitrary function to each spectrum and return its results.
## We calculate the mean intensity for each spectrum. By
## default the function parallelizes the operation FUN by file.
res <- spectrapply(dta, FUN = function(z) mean(intensity(z)))
head(res)

## Parameter `f` can be used to specify how the function splits the data
## into chunks for parallel processing. Below we disable parallel processing
## by defining a single chunk.
res <- spectrapply(dta, f = rep(1, nrow(spectraData(dta))),
    FUN = function(z) mean(intensity(z)))
head(res)
}
\author{
Sebastian Gibb, Johannes Rainer
}
